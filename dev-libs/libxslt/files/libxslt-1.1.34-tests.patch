diff -urN libxslt-1.1.34.orig/python/tests/basic.py libxslt-1.1.34/python/tests/basic.py
--- libxslt-1.1.34.orig/python/tests/basic.py	2020-02-08 19:41:44.326240463 +0100
+++ libxslt-1.1.34/python/tests/basic.py	2020-02-08 19:42:05.760241530 +0100
@@ -1,4 +1,7 @@
 #!/usr/bin/python -u
+from __future__ import absolute_import, division, print_function
+from builtins import *
+
 import sys
 import libxml2
 # Memory debug specific
@@ -14,7 +17,7 @@
 style.saveResultToFilename("foo", result, 0)
 stringval = style.saveResultToString(result)
 if (len(stringval) != 68):
-  print "Error in saveResultToString"
+  print ("Error in saveResultToString")
   sys.exit(255)
 style.freeStylesheet()
 doc.freeDoc()
@@ -23,8 +26,8 @@
 # Memory debug specific
 libxslt.cleanup()
 if libxml2.debugMemory(1) == 0:
-    print "OK"
+    print ("OK")
 else:
-    print "Memory leak %d bytes" % (libxml2.debugMemory(1))
+    print ("Memory leak %d bytes" % (libxml2.debugMemory(1)))
     libxml2.dumpMemory()
     sys.exit(255)
diff -urN libxslt-1.1.34.orig/python/tests/exslt.py libxslt-1.1.34/python/tests/exslt.py
--- libxslt-1.1.34.orig/python/tests/exslt.py	2020-02-08 19:41:44.325240463 +0100
+++ libxslt-1.1.34/python/tests/exslt.py	2020-02-08 19:42:05.760241530 +0100
@@ -1,4 +1,7 @@
 #!/usr/bin/python -u
+from __future__ import absolute_import, division, print_function
+from builtins import *
+
 import sys
 import libxml2
 # Memory debug specific
@@ -44,14 +47,14 @@
 """
 
 if stringval != expect:
-  print "Exslt processing failed"
+  print ("Exslt processing failed")
   sys.exit(255)
     
 # Memory debug specific
 libxslt.cleanup()
 if libxml2.debugMemory(1) == 0:
-    print "OK"
+    print ("OK")
 else:
-    print "Memory leak %d bytes" % (libxml2.debugMemory(1))
+    print ("Memory leak %d bytes" % (libxml2.debugMemory(1)))
     libxml2.dumpMemory()
     sys.exit(255)
diff -urN libxslt-1.1.34.orig/python/tests/extelem.py libxslt-1.1.34/python/tests/extelem.py
--- libxslt-1.1.34.orig/python/tests/extelem.py	2020-02-08 19:41:44.325240463 +0100
+++ libxslt-1.1.34/python/tests/extelem.py	2020-02-08 19:43:18.846245170 +0100
@@ -1,7 +1,15 @@
 #!/usr/bin/python -u
+from __future__ import absolute_import, division, print_function
+from builtins import *
+
 import sys
 import string
-import StringIO
+try:
+    import StringIO
+    str_io = StringIO.StringIO
+except:
+    import io
+    str_io = io.StringIO
 import libxml2
 # Memory debug specific
 libxml2.debugMemory(1)
@@ -58,23 +66,23 @@
 doc.freeDoc()
 
 
-extensions = StringIO.StringIO()
+extensions = str_io()
 libxslt.debugDumpExtensions(extensions)
 
 if 0 and extensions.buf.find(EXT_URL) < 0:
-    print "Element extension not registered (or dumping broken)"
+    print ("Element extension not registered (or dumping broken)")
     sys.exit(1)
 
 root = result.children
 
 if root.name != "article":
-    print "Unexpected root node name"
+    print ("Unexpected root node name")
     sys.exit(1)
 if root.content != "SUCCESS":
-    print "Unexpected root node content, extension function failed"
+    print ("Unexpected root node content, extension function failed")
     sys.exit(1)
 if insertNodeName != 'article':
-    print "The function callback failed to access its context"
+    print ("The function callback failed to access its context")
     sys.exit(1)
 
 result.dump(sys.stdout)
@@ -83,8 +91,8 @@
 # Memory debug specific
 libxslt.cleanup()
 if libxml2.debugMemory(1) == 0:
-    print "OK"
+    print ("OK")
 else:
-    print "Memory leak %d bytes" % (libxml2.debugMemory(1))
+    print ("Memory leak %d bytes" % (libxml2.debugMemory(1)))
     libxml2.dumpMemory()
     sys.exit(255)
diff -urN libxslt-1.1.34.orig/python/tests/extfunc.py libxslt-1.1.34/python/tests/extfunc.py
--- libxslt-1.1.34.orig/python/tests/extfunc.py	2020-02-08 19:41:44.325240463 +0100
+++ libxslt-1.1.34/python/tests/extfunc.py	2020-02-08 19:42:37.082243090 +0100
@@ -1,4 +1,7 @@
 #!/usr/bin/python -u
+from __future__ import absolute_import, division, print_function
+from builtins import *
+
 import sys
 import string
 import libxml2
@@ -22,7 +25,7 @@
     except:
         pass
 
-    return string.upper(str)
+    return str.upper(str)
 
 libxslt.registerExtModuleFunction("foo", "http://example.com/foo", f)
 
@@ -46,13 +49,13 @@
 
 root = result.children
 if root.name != "article":
-    print "Unexpected root node name"
+    print ("Unexpected root node name")
     sys.exit(1)
 if root.content != "SUCCESS":
-    print "Unexpected root node content, extension function failed"
+    print ("Unexpected root node content, extension function failed")
     sys.exit(1)
 if nodeName != 'article':
-    print "The function callback failed to access its context"
+    print ("The function callback failed to access its context")
     sys.exit(1)
 
 result.freeDoc()
@@ -60,8 +63,8 @@
 # Memory debug specific
 libxslt.cleanup()
 if libxml2.debugMemory(1) == 0:
-    print "OK"
+    print ("OK")
 else:
-    print "Memory leak %d bytes" % (libxml2.debugMemory(1))
+    print ("Memory leak %d bytes" % (libxml2.debugMemory(1)))
     libxml2.dumpMemory()
     sys.exit(255)
diff -urN libxslt-1.1.34.orig/python/tests/pyxsltproc.py libxslt-1.1.34/python/tests/pyxsltproc.py
--- libxslt-1.1.34.orig/python/tests/pyxsltproc.py	2020-02-08 19:41:44.325240463 +0100
+++ libxslt-1.1.34/python/tests/pyxsltproc.py	2020-02-08 19:42:05.760241530 +0100
@@ -4,6 +4,9 @@
 # bindings, not complete yet and shows up the things missing
 # from the existing python interfaces
 #
+from __future__ import absolute_import, division, print_function
+from builtins import *
+
 import sys
 import time
 import os
@@ -41,7 +44,7 @@
     global endtime
 
     endtime = time.time()
-    print "%s took %d ms" % (msg, (endtime - begin) * 1000)
+    print ("%s took %d ms" % (msg, (endtime - begin) * 1000))
 
 def xsltProcess(doc, cur, filename):
     global timing
@@ -72,7 +75,7 @@
 #        if ctxt == None:
 #            return
         if profile:
-            print "TODO: Profiling not yet supported"
+            print ("TODO: Profiling not yet supported")
         else:
             res = cur.applyStylesheet(doc, params)
         if timing:
@@ -82,7 +85,7 @@
                 endTimer("Applying stylesheet")
         doc.freeDoc()
         if res == None:
-            print "no result for %s" % (filename)
+            print ("no result for %s" % (filename))
             return
         if noout != 0:
             res.freeDoc()
@@ -97,35 +100,35 @@
                 endTimer("Saving result")
         res.freeDoc()
     else:
-        print "TODO: xsltRunStylesheet not yet mapped"
+        print ("TODO: xsltRunStylesheet not yet mapped")
 
 def usage(name = 'pyxsltproc'):
-    print "Usage: %s [options] stylesheet file [file ...]" % (name)
-    print "a reimplementation of xsltproc(1) on top of libxslt-python"
-    print "   Options:"
-    print "\t--version or -V: show the version of libxml and libxslt used"
-    print "\t--verbose or -v: show logs of what's happening"
-    print "\t--output file or -o file: save to a given file"
-    print "\t--timing: display the time used"
-    print "\t--repeat: run the transformation 20 times"
-    print "\t--debug: dump the tree of the result instead"
-    print "\t--novalid skip the Dtd loading phase"
-    print "\t--noout: do not dump the result"
-    print "\t--maxdepth val : increase the maximum depth"
-    print "\t--html: the input document is(are) an HTML file(s)"
-    print "\t--param name value : pass a (parameter,value) pair"
-    print "\t       value is an XPath expression."
-    print "\t       string values must be quoted like \"'string'\""
-    print "\t       or use stringparam to avoid it"
-    print "\t--stringparam name value : pass a (parameter,string value) pair"
-    print "\t--nonet refuse to fetch DTDs or entities over network"
-    print "\t--catalogs : use SGML catalogs from $SGML_CATALOG_FILES"
-    print "\t             otherwise XML Catalogs starting from "
-    print "\t         file:///etc/xml/catalog are activated by default"
-    print "\t--xinclude : do XInclude processing on document input"
-    print "\t--profile or --norman : dump profiling information "
-    print "\nProject libxslt home page: http://xmlsoft.org/XSLT/"
-    print "To report bugs and get help: http://xmlsoft.org/XSLT/bugs.html"
+    print ("Usage: %s [options] stylesheet file [file ...]" % (name))
+    print ("a reimplementation of xsltproc(1) on top of libxslt-python")
+    print ("   Options:")
+    print ("\t--version or -V: show the version of libxml and libxslt used")
+    print ("\t--verbose or -v: show logs of what's happening")
+    print ("\t--output file or -o file: save to a given file")
+    print ("\t--timing: display the time used")
+    print ("\t--repeat: run the transformation 20 times")
+    print ("\t--debug: dump the tree of the result instead")
+    print ("\t--novalid skip the Dtd loading phase")
+    print ("\t--noout: do not dump the result")
+    print ("\t--maxdepth val : increase the maximum depth")
+    print ("\t--html: the input document is(are) an HTML file(s)")
+    print ("\t--param name value : pass a (parameter,value) pair")
+    print ("\t       value is an XPath expression.")
+    print ("\t       string values must be quoted like \"'string'\"")
+    print ("\t       or use stringparam to avoid it")
+    print ("\t--stringparam name value : pass a (parameter,string value) pair")
+    print ("\t--nonet refuse to fetch DTDs or entities over network")
+    print ("\t--catalogs : use SGML catalogs from $SGML_CATALOG_FILES")
+    print ("\t             otherwise XML Catalogs starting from ")
+    print ("\t         file:///etc/xml/catalog are activated by default")
+    print ("\t--xinclude : do XInclude processing on document input")
+    print ("\t--profile or --norman : dump profiling information ")
+    print ("\nProject libxslt home page: http://xmlsoft.org/XSLT/")
+    print ("To report bugs and get help: http://xmlsoft.org/XSLT/bugs.html")
 
 def main(args = None):
     global debug
@@ -163,10 +166,10 @@
             debug = 1
         elif args[i] == "-verbose" or args[i] == "--verbose" or \
              args[i] == "-v":
-            print "TODO: xsltSetGenericDebugFunc() mapping missing"
+            print ("TODO: xsltSetGenericDebugFunc() mapping missing")
         elif args[i] == "-version" or args[i] == "--version" or \
              args[i] == "-V":
-            print "TODO: version information mapping missing"
+            print ("TODO: version information mapping missing")
         elif args[i] == "-verbose" or args[i] == "--verbose" or \
              args[i] == "-v":
             if repeat == 0:
@@ -174,14 +177,14 @@
             else:
                 repeat = 100
         elif args[i] == "-novalid" or args[i] == "--novalid":
-            print "TODO: xmlLoadExtDtdDefaultValue mapping missing"
+            print ("TODO: xmlLoadExtDtdDefaultValue mapping missing")
             novalid = 1
         elif args[i] == "-noout" or args[i] == "--noout":
             noout = 1
         elif args[i] == "-html" or args[i] == "--html":
             html = 1
         elif args[i] == "-nonet" or args[i] == "--nonet":
-            print "TODO: xmlSetExternalEntityLoader mapping missing"
+            print ("TODO: xmlSetExternalEntityLoader mapping missing")
             nonet = 1
         elif args[i] == "-catalogs" or args[i] == "--catalogs":
             try:
@@ -191,7 +194,7 @@
             if catalogs != none:
                 libxml2.xmlLoadCatalogs(catalogs)
             else:
-                print "Variable $SGML_CATALOG_FILES not set"
+                print ("Variable $SGML_CATALOG_FILES not set")
         elif args[i] == "-xinclude" or args[i] == "--xinclude":
             xinclude = 1
             libxslt.setXIncludeDefault(1)
@@ -204,9 +207,9 @@
             params[args[i]] = "'%s'" % (args[i + 1])
             i = i + 1
         elif args[i] == "-maxdepth" or args[i] == "--maxdepth":
-            print "TODO: xsltMaxDepth mapping missing"
+            print ("TODO: xsltMaxDepth mapping missing")
         else:
-            print "Unknown option %s" % (args[i])
+            print ("Unknown option %s" % (args[i]))
             usage()
             return(3)
         
@@ -247,7 +250,7 @@
         if timing:
             endTimer("Parsing stylesheet %s" % (args[i]))
         if style == None:
-            print "cannot parse %s" % (args[i])
+            print ("cannot parse %s" % (args[i]))
             cur = None
             errorno = 4
             done = 1
@@ -273,7 +276,7 @@
         else:
             doc = libxml2.parseFile(args[i])
         if doc == None:
-            print "unable to parse %s" % (args[i])
+            print ("unable to parse %s" % (args[i]))
             errorno = 6
             i = i + 1
             continue
@@ -292,7 +295,7 @@
 # Memory debug specific
 libxslt.cleanup()
 if libxml2.debugMemory(1) != 0:
-    print "Memory leak %d bytes" % (libxml2.debugMemory(1))
+    print ("Memory leak %d bytes" % (libxml2.debugMemory(1)))
     libxml2.dumpMemory()
 
 sys.exit(errorno)
