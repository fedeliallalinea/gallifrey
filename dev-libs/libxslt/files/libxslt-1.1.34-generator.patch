diff -urN libxslt-1.1.34.orig/python/generator.py libxslt-1.1.34/python/generator.py
--- libxslt-1.1.34.orig/python/generator.py	2020-02-06 15:56:30.304633688 +0100
+++ libxslt-1.1.34/python/generator.py	2020-02-06 15:56:50.955633413 +0100
@@ -2,6 +2,8 @@
 #
 # generate python wrappers from the XML API description
 #
+from __future__ import absolute_import, division, print_function
+from builtins import *
 
 functions = {}
 enums = {} # { enumType: { enumConstant: enumValue } }
@@ -39,19 +41,19 @@
 
     def close(self):
         if debug:
-            print "close"
+            print ("close")
 
     def getmethodname(self):
         return self._methodname
 
     def data(self, text):
         if debug:
-            print "data %s" % text
+            print ("data %s" % text)
         self._data.append(text)
 
     def start(self, tag, attrs):
         if debug:
-            print "start %s, %s" % (tag, attrs)
+            print ("start %s, %s" % (tag, attrs))
         if tag == 'function':
             self._data = []
             self.in_function = 1
@@ -60,9 +62,9 @@
             self.function_descr = None
             self.function_return = None
             self.function_file = None
-            if attrs.has_key('name'):
+            if 'name' in attrs:
                 self.function = attrs['name']
-            if attrs.has_key('file'):
+            if 'file' in attrs:
                 self.function_file = attrs['file']
         elif tag == 'info':
             self._data = []
@@ -71,22 +73,22 @@
                 self.function_arg_name = None
                 self.function_arg_type = None
                 self.function_arg_info = None
-                if attrs.has_key('name'):
+                if 'name' in attrs:
                     self.function_arg_name = attrs['name']
-                if attrs.has_key('type'):
+                if 'type' in attrs:
                     self.function_arg_type = attrs['type']
-                if attrs.has_key('info'):
+                if 'info' in attrs:
                     self.function_arg_info = attrs['info']
         elif tag == 'return':
             if self.in_function == 1:
                 self.function_return_type = None
                 self.function_return_info = None
                 self.function_return_field = None
-                if attrs.has_key('type'):
+                if 'type' in attrs:
                     self.function_return_type = attrs['type']
-                if attrs.has_key('info'):
+                if 'info' in attrs:
                     self.function_return_info = attrs['info']
-                if attrs.has_key('field'):
+                if 'field' in attrs:
                     self.function_return_field = attrs['field']
         elif tag == 'enum':
             enum(attrs['type'],attrs['name'],attrs['value']) 
@@ -95,7 +97,7 @@
 
     def end(self, tag):
         if debug:
-            print "end %s" % tag
+            print ("end %s" % tag)
         if tag == 'function':
             if self.function != None:
                 function(self.function, self.function_descr,
@@ -124,7 +126,7 @@
     functions[name] = (desc, ret, args, file)
 
 def enum(type, name, value):
-    if not enums.has_key(type):
+    if type not in enums:
         enums[type] = {}
     enums[type][name] = value 
 
@@ -264,10 +266,10 @@
     try:
         (desc, ret, args, file) = functions[name]
     except:
-        print "failed to get function %s infos"
+        print ("failed to get function %s infos")
         return
 
-    if skipped_modules.has_key(file):
+    if file in skipped_modules:
         return 0
     if skip_function(name) == 1:
         return 0
@@ -280,10 +282,10 @@
     c_convert=""
     for arg in args:
         # This should be correct
-        if arg[1][0:6] == "const ":
+        if arg[1] == "const ":
             arg[1] = arg[1][6:]
         c_args = c_args + "    %s %s;\n" % (arg[1], arg[0])
-        if py_types.has_key(arg[1]):
+        if arg[1] in py_types:
             (f, t, n, c, p) = py_types[arg[1]]
             if f != None:
                 format = format + f
@@ -299,9 +301,9 @@
                 c_call = c_call + ", "
             c_call = c_call + "%s" % (arg[0])
         else:
-            if skipped_types.has_key(arg[1]):
+            if arg[1] in skipped_types:
                 return 0
-            if unknown_types.has_key(arg[1]):
+            if arg[1] in unknown_types:
                 lst = unknown_types[arg[1]]
                 lst.append(name)
             else:
@@ -323,7 +325,7 @@
         else:
             c_call = "\n    %s(%s);\n" % (name, c_call)
         ret_convert = "    Py_INCREF(Py_None);\n    return(Py_None);\n"
-    elif py_types.has_key(ret[0]):
+    elif ret[0] in py_types:
         (f, t, n, c, p) = py_types[ret[0]]
         c_return = "    %s c_retval;\n" % (ret[0])
         if file == "python_accessor" and ret[2] != None:
@@ -332,7 +334,7 @@
             c_call = "\n    c_retval = %s(%s);\n" % (name, c_call)
         ret_convert = "    py_retval = %s%sWrap((%s) c_retval);\n" % (p,n,c)
         ret_convert = ret_convert + "    return(py_retval);\n"
-    elif py_return_types.has_key(ret[0]):
+    elif ret[0] in py_return_types:
         (f, t, n, c, p) = py_return_types[ret[0]]
         c_return = "    %s c_retval;\n" % (ret[0])
         if file == "python_accessor" and ret[2] != None:
@@ -342,9 +344,9 @@
         ret_convert = "    py_retval = %s%sWrap((%s) c_retval);\n" % (p,n,c)
         ret_convert = ret_convert + "    return(py_retval);\n"
     else:
-        if skipped_types.has_key(ret[0]):
+        if ret[0] in skipped_types:
             return 0
-        if unknown_types.has_key(ret[0]):
+        if ret[0] in unknown_types:
             lst = unknown_types[ret[0]]
             lst.append(name)
         else:
@@ -398,18 +400,18 @@
         (parser, target)  = getparser()
         parser.feed(data)
         parser.close()
-    except IOError, msg:
+    except IOError as msg:
         try:
             f = open("%s/../doc/libxslt-api.xml" % srcdir)
             data = f.read()
             (parser, target)  = getparser()
             parser.feed(data)
             parser.close()
-        except IOError, msg:
-            print "../doc/libxslt-api.xml", ":", msg
+        except IOError as msg:
+            print ("../doc/libxslt-api.xml", ":", msg)
 
-    n = len(functions.keys())
-    print "Found %d functions in libxslt-api.xml" % (n)
+    n = len(list(functions.keys()))
+    print ("Found %d functions in libxslt-api.xml" % (n))
 
     py_types['pythonObject'] = ('O', "pythonObject", "pythonObject",
                                 "pythonObject", "libxml_")
@@ -419,12 +421,12 @@
         (parser, target)  = getparser()
         parser.feed(data)
         parser.close()
-    except IOError, msg:
-        print "libxslt-python-api.xml", ":", msg
+    except IOError as msg:
+        print ("libxslt-python-api.xml", ":", msg)
 
 
-    print "Found %d functions in libxslt-python-api.xml" % (
-          len(functions.keys()) - n)
+    print ("Found %d functions in libxslt-python-api.xml" % (
+          len(list(functions.keys())) - n))
     nb_wrap = 0
     failed = 0
     skipped = 0
@@ -439,7 +441,7 @@
     wrapper.write("#include <libxslt/xsltconfig.h>\n")
     wrapper.write("#include \"libxslt_wrap.h\"\n")
     wrapper.write("#include \"libxslt-py.h\"\n\n")
-    for function in functions.keys():
+    for function in list(functions.keys()):
         ret = print_function_wrapper(function, wrapper, export, include)
         if ret < 0:
             failed = failed + 1
@@ -453,12 +455,12 @@
     export.close()
     wrapper.close()
 
-    print "Generated %d wrapper functions, %d failed, %d skipped\n" % (nb_wrap,
-                                                              failed, skipped)
-    print "Missing type converters:"
-    for type in unknown_types.keys():
-        print "%s:%d " % (type, len(unknown_types[type])),
-    print
+    print ("Generated %d wrapper functions, %d failed, %d skipped\n" % (nb_wrap,
+                                                              failed, skipped))
+    print ("Missing type converters:")
+    for type in list(unknown_types.keys()):
+        print("%s:%d " % (type, len(unknown_types[type])), end=' ')
+    print ()
 
 #######################################################################
 #
@@ -533,55 +535,55 @@
     l = len(classe)
     if name[0:l] == listname:
         func = name[l:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:12] == "xmlParserGet" and file == "python_accessor":
         func = name[12:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:12] == "xmlParserSet" and file == "python_accessor":
         func = name[12:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:10] == "xmlNodeGet" and file == "python_accessor":
         func = name[10:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:18] == "xsltXPathParserGet" and file == "python_accessor":
         func = name[18:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:12] == "xsltXPathGet" and file == "python_accessor":
         func = name[12:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:16] == "xsltTransformGet" and file == "python_accessor":
         func = name[16:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:16] == "xsltTransformSet" and file == "python_accessor":
         func = name[13:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:17] == "xsltStylesheetGet" and file == "python_accessor":
         func = name[17:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:17] == "xsltStylesheetSet" and file == "python_accessor":
         func = name[14:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:l] == classe:
         func = name[l:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:7] == "libxml_":
         func = name[7:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:8] == "libxslt_":
         func = name[8:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:6] == "xmlGet":
         func = name[6:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:3] == "xml":
         func = name[3:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:7] == "xsltGet":
         func = name[7:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     elif name[0:4] == "xslt":
         func = name[4:]
-        func = string.lower(func[0:1]) + func[1:]
+        func = func[0:1].lower() + func[1:]
     else:
         func = name
     if func[0:5] == "xPath":
@@ -598,6 +600,25 @@
         func = "UTF8" + func[4:]
     return func
 
+def cmp_to_key(mycmp):
+    'Convert a cmp= function into a key= function'
+    class K(object):
+        def __init__(self, obj, *args):
+            self.obj = obj
+        def __lt__(self, other):
+            return mycmp(self.obj, other.obj) < 0
+        def __gt__(self, other):
+            return mycmp(self.obj, other.obj) > 0
+        def __eq__(self, other):
+            return mycmp(self.obj, other.obj) == 0
+        def __le__(self, other):
+            return mycmp(self.obj, other.obj) <= 0
+        def __ge__(self, other):
+            return mycmp(self.obj, other.obj) >= 0
+        def __ne__(self, other):
+            return mycmp(self.obj, other.obj) != 0
+    return K
+
 def functionCompare(info1, info2):
     (index1, func1, name1, ret1, args1, file1) = info1
     (index2, func2, name2, ret2, args2, file2) = info2
@@ -620,7 +641,7 @@
      if functions[name][0] == None or functions[name][0] == "":
          return
      val = functions[name][0]
-     val = string.replace(val, "NULL", "None")
+     val = val.replace("NULL", "None")
      output.write(indent)
      output.write('"""')
      while len(val) > 60:
@@ -628,7 +649,7 @@
              val = val[1:]
              continue
          str = val[0:60]
-         i = string.rfind(str, " ")
+         i = str.rfind(" ")
          if i < 0:
              i = 60
          str = val[0:i]
@@ -659,7 +680,7 @@
     global classes_destructors
 
     function_classes["None"] = []
-    for type in classes_type.keys():
+    for type in list(classes_type.keys()):
         function_classes[classes_type[type][2]] = []
         
     #
@@ -671,23 +692,23 @@
     for classe in primary_classes:
         classes_list.append(classe)
         classes_processed[classe] = ()
-        for type in classes_type.keys():
+        for type in list(classes_type.keys()):
             tinfo = classes_type[type]
             if tinfo[2] == classe:
                 ctypes.append(type)
                 ctypes_processed[type] = ()
-    for type in classes_type.keys():
-        if ctypes_processed.has_key(type):
+    for type in list(classes_type.keys()):
+        if type in ctypes_processed:
             continue
         tinfo = classes_type[type]
-        if not classes_processed.has_key(tinfo[2]):
+        if tinfo[2] not in classes_processed:
             classes_list.append(tinfo[2])
             classes_processed[tinfo[2]] = ()
             
         ctypes.append(type)
         ctypes_processed[type] = ()
 
-    for name in functions.keys():
+    for name in list(functions.keys()):
         found = 0
         (desc, ret, args, file) = functions[name]
         for type in ctypes:
@@ -725,9 +746,9 @@
     txt.write("          Generated Classes for libxslt-python\n\n")
 
     txt.write("#\n# Global functions of the module\n#\n\n")
-    if function_classes.has_key("None"):
+    if "None" in function_classes:
         flist = function_classes["None"]
-        flist.sort(functionCompare)
+        flist.sort(key=cmp_to_key(functionCompare))
         oldfile = ""
         for info in flist:
             (index, func, name, ret, args, file) = info
@@ -747,12 +768,12 @@
             writeDoc(name, args, '    ', classes)
 
             for arg in args:
-                if classes_type.has_key(arg[1]):
+                if arg[1] in classes_type:
                     classes.write("    if %s == None: %s__o = None\n" %
                                   (arg[0], arg[0]))
                     classes.write("    else: %s__o = %s%s\n" %
                                   (arg[0], arg[0], classes_type[arg[1]][0]))
-                elif libxml2_classes_type.has_key(arg[1]):
+                elif arg[1] in libxml2_classes_type:
                     classes.write("    if %s == None: %s__o = None\n" %
                                   (arg[0], arg[0]))
                     classes.write("    else: %s__o = %s%s\n" %
@@ -767,19 +788,19 @@
                 if n != 0:
                     classes.write(", ")
                 classes.write("%s" % arg[0])
-                if classes_type.has_key(arg[1]):
+                if arg[1] in classes_type:
                     classes.write("__o")
-                if libxml2_classes_type.has_key(arg[1]):
+                if arg[1] in libxml2_classes_type:
                     classes.write("__o")
                 n = n + 1
             classes.write(")\n")
             if ret[0] != "void":
-                if classes_type.has_key(ret[0]):
+                if ret[0] in classes_type:
                     classes.write("    if ret == None: return None\n")
                     classes.write("    return ")
                     classes.write(classes_type[ret[0]][1] % ("ret"))
                     classes.write("\n")
-                elif libxml2_classes_type.has_key(ret[0]):
+                elif ret[0] in libxml2_classes_type:
                     classes.write("    if ret == None: return None\n")
                     classes.write("    return libxml2.")
                     classes.write(libxml2_classes_type[ret[0]][1] % ("ret"))
@@ -793,7 +814,7 @@
         if classname == "None":
             pass
         else:
-            if classes_ancestor.has_key(classname):
+            if classname in classes_ancestor:
                 txt.write("\n\nClass %s(%s)\n" % (classname,
                           classes_ancestor[classname]))
                 classes.write("class %s(%s):\n" % (classname,
@@ -814,7 +835,7 @@
                 classes.write("    def __init__(self, _obj=None):\n")
                 classes.write("        if _obj != None:self._o = _obj;return\n")
                 classes.write("        self._o = None\n\n")
-            if classes_destructors.has_key(classname):
+            if classname in classes_destructors:
                 classes.write("    def __del__(self):\n")
                 if classes_destructors[classname] == "pass":
                     classes.write("        pass\n")
@@ -824,7 +845,7 @@
                                   classes_destructors[classname])
                     classes.write("        self._o = None\n\n")
             flist = function_classes[classname]
-            flist.sort(functionCompare)
+            flist.sort(key=cmp_to_key(functionCompare))
             oldfile = ""
             for info in flist:
                 (index, func, name, ret, args, file) = info
@@ -850,13 +871,13 @@
                 writeDoc(name, args, '        ', classes)
                 n = 0
                 for arg in args:
-                    if classes_type.has_key(arg[1]):
+                    if arg[1] in classes_type:
                         if n != index:
                             classes.write("        if %s == None: %s__o = None\n" %
                                           (arg[0], arg[0]))
                             classes.write("        else: %s__o = %s%s\n" %
                                           (arg[0], arg[0], classes_type[arg[1]][0]))
-                    elif libxml2_classes_type.has_key(arg[1]):
+                    elif arg[1] in libxml2_classes_type:
                         classes.write("        if %s == None: %s__o = None\n" %
                                       (arg[0], arg[0]))
                         classes.write("        else: %s__o = %s%s\n" %
@@ -874,30 +895,30 @@
                         classes.write(", ")
                     if n != index:
                         classes.write("%s" % arg[0])
-                        if classes_type.has_key(arg[1]):
+                        if arg[1] in classes_type:
                             classes.write("__o")
-                        elif libxml2_classes_type.has_key(arg[1]):
+                        elif arg[1] in libxml2_classes_type:
                             classes.write("__o")
                     else:
                         classes.write("self")
-                        if classes_type.has_key(arg[1]):
+                        if arg[1] in classes_type:
                             classes.write(classes_type[arg[1]][0])
-                        elif libxml2_classes_type.has_key(arg[1]):
+                        elif arg[1] in libxml2_classes_type:
                             classes.write(libxml2_classes_type[arg[1]][0])
                     n = n + 1
                 classes.write(")\n")
                 if ret[0] != "void":
-                    if classes_type.has_key(ret[0]):
+                    if ret[0] in classes_type:
                         classes.write("        if ret == None: return None\n")
                         classes.write("        return ")
                         classes.write(classes_type[ret[0]][1] % ("ret"))
                         classes.write("\n")
-                    elif libxml2_classes_type.has_key(ret[0]):
+                    elif ret[0] in libxml2_classes_type:
                         classes.write("        if ret == None: return None\n")
                         classes.write("        return libxml2.")
                         classes.write(libxml2_classes_type[ret[0]][1] % ("ret"))
                         classes.write("\n")
-                    elif converter_type.has_key(ret[0]):
+                    elif ret[0] in converter_type:
                         classes.write("        if ret == None: return None\n")
                         classes.write("        return ")
                         classes.write(converter_type[ret[0]] % ("ret"))
@@ -909,10 +930,10 @@
     #
     # Generate enum constants
     #
-    for type,enum in enums.items():
+    for type,enum in list(enums.items()):
         classes.write("# %s\n" % type)
-        items = enum.items()
-        items.sort(lambda i1,i2: cmp(long(i1[1]),long(i2[1])))
+        items = list(enum.items())
+        items.sort(key=lambda x: x[1])
         for name,value in items:
             classes.write("%s = %s\n" % (name,value))
         classes.write("\n"); 
