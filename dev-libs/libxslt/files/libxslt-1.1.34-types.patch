diff -urN libxslt-1.1.34.orig/python/types.c libxslt-1.1.34/python/types.c
--- libxslt-1.1.34.orig/python/types.c	2020-02-06 19:15:14.230474938 +0100
+++ libxslt-1.1.34/python/types.c	2020-02-06 19:15:55.734474386 +0100
@@ -21,7 +21,7 @@
 #ifdef DEBUG
     printf("libxml_intWrap: val = %d\n", val);
 #endif
-    ret = PyInt_FromLong((long) val);
+    ret = PyLong_FromLong((long) val);
     return (ret);
 }
 
@@ -33,7 +33,7 @@
 #ifdef DEBUG
     printf("libxml_longWrap: val = %ld\n", val);
 #endif
-    ret = PyInt_FromLong(val);
+    ret = PyLong_FromLong(val);
     return (ret);
 }
 
@@ -62,7 +62,7 @@
         return (Py_None);
     }
     /* TODO: look at deallocation */
-    ret = PyString_FromString(str);
+    ret = PyUnicode_FromString(str);
     xmlFree(str);
     return (ret);
 }
@@ -80,7 +80,7 @@
         return (Py_None);
     }
     /* TODO: look at deallocation */
-    ret = PyString_FromString(str);
+    ret = PyUnicode_FromString(str);
     return (ret);
 }
 
@@ -97,7 +97,7 @@
         return (Py_None);
     }
     /* TODO: look at deallocation */
-    ret = PyString_FromString((char *) str);
+    ret = PyUnicode_FromString((char *) str);
     xmlFree(str);
     return (ret);
 }
@@ -115,7 +115,7 @@
         return (Py_None);
     }
     /* TODO: look at deallocation */
-    ret = PyString_FromString((char *) str);
+    ret = PyUnicode_FromString((char *) str);
     return (ret);
 }
 
@@ -132,7 +132,7 @@
         return (Py_None);
     }
     /* TODO: look at deallocation */
-    ret = PyString_FromString(str);
+    ret = PyUnicode_FromString(str);
     return (ret);
 }
 
@@ -149,7 +149,7 @@
         return (Py_None);
     }
     /* TODO: look at deallocation */
-    ret = PyString_FromString((char *) str);
+    ret = PyUnicode_FromString((char *) str);
     return (ret);
 }
 
@@ -166,9 +166,23 @@
         return (Py_None);
     }
     /* TODO: look at deallocation */
+#if PY_MAJOR_VERSION >= 3
+    /* 
+     * Note - PyCapsule object layout is the same as PyCObject (i.e. the
+     * obj pointer is immediately after the python obj part), so 
+     * the unchecked casting when these are unpacked will continue
+     * to work without modification (see libxml2-py.c).
+     *
+     * TODO: maybe we should start doing checks on unwrap using the 
+     * PyCapsule API? 
+     */
+    ret = PyCapsule_New((void *) doc, (char *) "xmlDocPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) doc, (char *) "xmlDocPtr",
                                      NULL);
+#endif
     return (ret);
 }
 
@@ -184,9 +198,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) node, (char *) "xmlNodePtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) node, (char *) "xmlNodePtr",
                                      NULL);
+#endif
     return (ret);
 }
 
@@ -202,9 +221,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) uri, (char *) "xmlURIPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) uri, (char *) "xmlURIPtr",
                                      NULL);
+#endif
     return (ret);
 }
 
@@ -220,9 +244,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) ns, (char *) "xmlNSPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) ns, (char *) "xmlNsPtr",
                                      NULL);
+#endif
     return (ret);
 }
 
@@ -238,9 +267,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) attr, (char *) "xmlAttrPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) attr, (char *) "xmlAttrPtr",
                                      NULL);
+#endif
     return (ret);
 }
 
@@ -256,9 +290,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) attr, (char *) "xmlURIPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) attr,
-                                     (char *) "xmlAttributePtr", NULL);
+                                     (char *) "xmlURIPtr", NULL);
+#endif
     return (ret);
 }
 
@@ -274,9 +313,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) elem, (char *) "xmlElementPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) elem,
                                      (char *) "xmlElementPtr", NULL);
+#endif
     return (ret);
 }
 
@@ -292,9 +336,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) ctxt, (char *) "xmlXPathContextPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) ctxt,
                                      (char *) "xmlXPathContextPtr", NULL);
+#endif
     return (ret);
 }
 
@@ -310,9 +359,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) ctxt, (char *) "xmlXPathParserContextPtr", 
+                        NULL); 
+#else
     ret = PyCObject_FromVoidPtrAndDesc((void *) ctxt,
                                        (char *) "xmlXPathParserContextPtr",
                                        NULL);
+#endif
     return (ret);
 }
 
@@ -328,9 +382,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) ctxt, (char *) "xmlParserCtxtPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) ctxt,
                                      (char *) "xmlParserCtxtPtr", NULL);
+#endif
     return (ret);
 }
 
@@ -345,11 +404,11 @@
  * xmlDoc document, see xmlXPathNodeSetDupNs.
  */
 static void
-libxml_xmlXPathDestructNsNode(void *cobj, void *desc ATTRIBUTE_UNUSED) {
+libxml_xmlXPathDestructNsNode(PyObject *cap) {
 #ifdef DEBUG
-    fprintf(stderr, "libxml_xmlXPathDestructNsNode called %p\n", cobj);
+    fprintf(stderr, "libxml_xmlXPathDestructNsNode called %p\n", cab);
 #endif
-    xmlXPathNodeSetFreeNs((xmlNsPtr) cobj);
+    xmlXPathNodeSetFreeNs((xmlNsPtr) cap);
 }
 
 PyObject *
@@ -403,10 +462,15 @@
                 for (i = 0; i < obj->nodesetval->nodeNr; i++) {
                     node = obj->nodesetval->nodeTab[i];
                     if (node->type == XML_NAMESPACE_DECL) {
+#if PY_MAJOR_VERSION >= 3
+			PyObject *ns = PyCapsule_New((void *) node, (char *) "xmlNSPtr", 
+                        libxml_xmlXPathDestructNsNode); 
+#else
 		        PyObject *ns =
 			    PyCObject_FromVoidPtrAndDesc((void *) node,
                                      (char *) "xmlNsPtr",
 				     libxml_xmlXPathDestructNsNode);
+#endif
 			PyList_SetItem(ret, i, ns);
 			/* make sure the xmlNsPtr is not destroyed now */
 			obj->nodesetval->nodeTab[i] = NULL;
@@ -417,13 +481,13 @@
             }
             break;
         case XPATH_BOOLEAN:
-            ret = PyInt_FromLong((long) obj->boolval);
+            ret = PyLong_FromLong((long) obj->boolval);
             break;
         case XPATH_NUMBER:
             ret = PyFloat_FromDouble(obj->floatval);
             break;
         case XPATH_STRING:
-            ret = PyString_FromString((char *) obj->stringval);
+            ret = PyUnicode_FromString((char *) obj->stringval);
             break;
         case XPATH_POINT:
         case XPATH_RANGE:
@@ -453,9 +517,9 @@
     if PyFloat_Check
         (obj) {
         ret = xmlXPathNewFloat((double) PyFloat_AS_DOUBLE(obj));
-    } else if PyInt_Check(obj) {
+    } else if PyLong_Check(obj) {
 
-        ret = xmlXPathNewFloat((double) PyInt_AS_LONG(obj));
+        ret = xmlXPathNewFloat((double) PyLong_AS_LONG(obj));
 
     } else if PyBool_Check (obj) {
 
@@ -466,12 +530,11 @@
           ret = xmlXPathNewBoolean(0);
         }
 
-    } else if PyString_Check
-        (obj) {
+    } else if (PyUnicode_Check (obj)) {
         xmlChar *str;
 
-        str = xmlStrndup((const xmlChar *) PyString_AS_STRING(obj),
-                         PyString_GET_SIZE(obj));
+        str = xmlStrndup((const xmlChar *) PyBytes_AS_STRING(obj),
+                         PyBytes_GET_SIZE(obj));
         ret = xmlXPathWrapString(str);
     } else if PyList_Check
         (obj) {
@@ -488,28 +551,18 @@
                 continue;
 
             cur = NULL;
-            if (PyCObject_Check(node)) {
+            if (PyCapsule_CheckExact(node)) {
 #ifdef DEBUG
                 printf("Got a CObject\n");
 #endif
                 cur = PyxmlNode_Get(node);
-            } else if (PyInstance_Check(node)) {
-                PyInstanceObject *inst = (PyInstanceObject *) node;
-                PyObject *name = inst->in_class->cl_name;
-
-                if PyString_Check
-                    (name) {
-                    char *type = PyString_AS_STRING(name);
-                    PyObject *wrapper;
-
-                    if (!strcmp(type, "xmlNode")) {
-                        wrapper =
-                            PyObject_GetAttrString(node, (char *) "_o");
-                        if (wrapper != NULL) {
-                            cur = PyxmlNode_Get(wrapper);
-                        }
-                    }
-                    }
+            } else if ((PyObject_HasAttrString(node, (char *) "_o")) &&
+                (PyObject_HasAttrString(node, (char *) "get_doc"))) {
+			PyObject *wrapper;
+
+			wrapper = PyObject_GetAttrString(node, (char *) "_o");
+			if (wrapper != NULL)
+				cur = PyxmlNode_Get(wrapper);
             } else {
 #ifdef DEBUG
                 printf("Unknown object in Python return list\n");
@@ -541,9 +594,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) catal, (char *) "xmlCatalogPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) catal,
                                      (char *) "xmlCatalogPtr", NULL);
+#endif
     return (ret);
 }
 
@@ -559,9 +617,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) buffer, (char *) "xmlOutputBufferPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) buffer,
                                      (char *) "xmlOutputBufferPtr", NULL);
+#endif
     return (ret);
 }
 
@@ -577,9 +640,14 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) buffer, (char *) "xmlParserInputBufferPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) buffer,
                                      (char *) "xmlParserInputBufferPtr", NULL);
+#endif
     return (ret);
 }
 
@@ -595,8 +663,13 @@
         Py_INCREF(Py_None);
         return (Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) regexp, (char *) "xmlRegexpPtr", 
+                        NULL); 
+#else
     ret =
         PyCObject_FromVoidPtrAndDesc((void *) regexp,
                                      (char *) "xmlRegexpPtr", NULL);
+#endif
     return (ret);
 }
