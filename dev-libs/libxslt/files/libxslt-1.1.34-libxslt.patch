diff -urN libxslt-1.1.34.orif/python/libxslt.c libxslt-1.1.34/python/libxslt.c
--- libxslt-1.1.34.orif/python/libxslt.c	2020-02-06 19:29:32.825463507 +0100
+++ libxslt-1.1.34/python/libxslt.c	2020-02-06 19:38:19.656456493 +0100
@@ -77,9 +77,13 @@
 	Py_INCREF(Py_None);
 	return(Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) style,
+                        (char *)"xsltStylesheetPtr", NULL); 
+#else
     ret = PyCObject_FromVoidPtrAndDesc((void *) style,
 	                               (char *)"xsltStylesheetPtr", NULL);
-
+#endif
     return(ret);
 }
 
@@ -94,8 +98,13 @@
 	Py_INCREF(Py_None);
 	return(Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) ctxt,
+                        (char *)"xsltTransformContextPtr", NULL); 
+#else
     ret = PyCObject_FromVoidPtrAndDesc((void *) ctxt,
 	                               (char *)"xsltTransformContextPtr", NULL);
+#endif
     return(ret);
 }
 
@@ -110,8 +119,13 @@
 	Py_INCREF(Py_None);
 	return(Py_None);
     }
+#if PY_MAJOR_VERSION >= 3
+    ret = PyCapsule_New((void *) ctxt,
+                        (char *)"xsltElemPreCompPtr", NULL); 
+#else
     ret = PyCObject_FromVoidPtrAndDesc((void *) ctxt,
 	                               (char *)"xsltElemPreCompPtr", NULL);
+#endif
     return(ret);
 }
 
@@ -129,7 +143,7 @@
     tctxt =  (xsltTransformContextPtr) PytransformCtxt_Get(py_tctxt);
     hash_code = (ptrdiff_t) tctxt;
 
-    ret = PyInt_FromLong(hash_code);
+    ret = PyLong_FromLong(hash_code);
     return ret;
 }
 
@@ -166,7 +180,7 @@
     style =  (xsltStylesheetPtr) Pystylesheet_Get(py_style);
     hash_code = (ptrdiff_t) style;
 
-    ret = PyInt_FromLong(hash_code);
+    ret = PyLong_FromLong(hash_code);
     return ret;
 }
 
@@ -620,7 +634,7 @@
     pythonDocLoaderObject = loader;
     xsltSetLoaderFunc(pythonDocLoaderFuncWrapper);
 
-    py_retval = PyInt_FromLong(0);
+    py_retval = PyLong_FromLong(0);
     return(py_retval);
 }
 
@@ -712,13 +726,21 @@
 		while (PyDict_Next(pyobj_params, &ppos, &name, &value)) {
 		    const char *tmp;
 		    int size;
-
+#if PY_MAJOR_VERSION >= 3
+                    tmp = PyUnicode_AsUTF8(name);
+#else
 		    tmp = PyString_AS_STRING(name);
 		    size = PyString_GET_SIZE(name);
+#endif
 		    params[j * 2] = (char *) xmlCharStrndup(tmp, size);
+#if PY_MAJOR_VERSION >= 3
+                    if (PyUnicode_Check(value)) {
+                        tmp = PyUnicode_AsUTF8(value);
+#else
 		    if (PyString_Check(value)) {
 			tmp = PyString_AS_STRING(value);
 			size = PyString_GET_SIZE(value);
+#endif
 			params[(j * 2) + 1] = (char *)
 			    xmlCharStrndup(tmp, size);
 		    } else {
@@ -787,16 +809,24 @@
 		j = 0;
 		while (PyDict_Next(pyobj_params, &ppos, &name, &value)) {
 		    const char *tmp;
-		    int size;
-
-		    tmp = PyString_AS_STRING(name);
-		    size = PyString_GET_SIZE(name);
-		    params[j * 2] = (char *) xmlCharStrndup(tmp, size);
-		    if (PyString_Check(value)) {
-			tmp = PyString_AS_STRING(value);
-			size = PyString_GET_SIZE(value);
-			params[(j * 2) + 1] = (char *)
-			    xmlCharStrndup(tmp, size);
+		    Py_ssize_t size;
+#if PY_MAJOR_VERSION >= 3
+                    tmp = PyUnicode_AsUTF8AndSize(name, &size);
+		    params[j * 2] = (char *) xmlCharStrndup(tmp, (int) size);
+#else 
+                    PyObject *b;
+                    b = PyUnicode_AsUTF8String(name);
+                    if (b != NULL) {
+                      params[j * 2] = (char *) xmlCharStrndup(PyBytes_AS_STRING(b),
+                                                              PyBytes_GET_SIZE(b));
+                      Py_DECREF(b);
+                    }
+#endif
+                    if (PyBytes_Check(value)) {
+                      tmp = PyBytes_AS_STRING(value);
+                      size = PyBytes_GET_SIZE(value);
+                      params[(j * 2) + 1] = (char *)
+		        xmlCharStrndup(tmp, size);
 		    } else {
 			params[(j * 2) + 1] = NULL;
 		    }
@@ -859,11 +889,19 @@
     if(size)
       {
       buffer[size] = '\0';
+#if PY_MAJOR_VERSION >= 3
+      py_retval = PyUnicode_DecodeUTF8((char *) buffer, size, NULL);
+#else
       py_retval = PyString_FromString((char *) buffer);
+#endif
       xmlFree(buffer);
       }
     else
+#if PY_MAJOR_VERSION >= 3
+      py_retval = PyUnicode_DecodeUTF8("", 0, NULL);
+#else
       py_retval = PyString_FromString("");
+#endif
     return(py_retval);
  FAIL:
     return(0);
@@ -1197,20 +1235,53 @@
 };
 
 #ifdef MERGED_MODULES
+#if PY_MAJOR_VERSION >= 3
+extern void PyInit_libxml2mod(void);
+#else
 extern void initlibxml2mod(void);
 #endif
+#endif
+
+/*
+ * for Python 3 this function must start with PyInit, for Python 2 it must
+ * start with init.
+ *
+ * https://www.python.org/dev/peps/pep-3121/
+ */
+
+#if PY_MAJOR_VERSION >= 3
+#define INITERROR return NULL
 
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "libxsltmod",
+    NULL,
+    -1,
+    libxsltMethods,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};
+
+PyObject* PyInit_libxsltmod(void) {
+#else
+#define INITERROR return NULL
 void initlibxsltmod(void) {
-    static int initialized = 0;
+#endif
+    PyObject *m;
 
 #ifdef MERGED_MODULES
     initlibxml2mod();
 #endif
 
-    if (initialized != 0)
-	return;
-    Py_InitModule((char *)"libxsltmod", libxsltMethods);
-    initialized = 1;
+#if PY_MAJOR_VERSION >= 3
+    m = PyModule_Create(&moduledef);
+#else
+    m = Py_InitModule((char *)"libxsltmod", libxsltMethods);
+#endif
+    if (m == NULL)
+      INITERROR;
     /*
      * Specific XSLT initializations
      */
@@ -1222,6 +1293,10 @@
      * Register the EXSLT extensions and the test module
      */
     exsltRegisterAll();
+
+#if PY_MAJOR_VERSION >= 3
+    return m;
+#endif
 }
 
 
